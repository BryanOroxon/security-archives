// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using UIKit;
using FaceAPI.iOS.Utils;
using FaceAPI.iOS.Models;
using FaceAPI.iOS.Client.V1;
using FaceAPI.iOS.Utils;
using System.Threading.Tasks;

namespace FaceAPI.iOS.ViewControllers
{
	public partial class GroupsViewController : UITableViewController
	{
		List<PersonGroupModel> Groups;

		public GroupsViewController(IntPtr handle) : base(handle) { }

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			this.Title = Constants.__TITLE_GROUPS__;
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);
			loadGroups();
		}

		private void loadGroups()
		{
			try
			{
				Task.Run(async () =>
				{
					Groups = await PersonGroupClient.Shared.GetPersonGroups();

					BeginInvokeOnMainThread(() =>
					{
						TableView.ReloadData();
					});
				});
			}
			catch (Exception ex)
			{
				this.ShowSimpleAlert("Error loading groups.");
				Log.Error($"Error getting groups :: {ex.Message}");
			}
		}

		public override nint NumberOfSections(UITableView tableView) => 1;

		public override nint RowsInSection(UITableView tableView, nint section) => Groups?.Count ?? 0;

		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			var cell = tableView.DequeueReusableCell("Cell", indexPath);

			cell.TextLabel.Text = Groups[indexPath.Row].Name;
			cell.BackgroundColor = UIColor.Clear;

			return cell;
		}

		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			PersonGroupModel pg = Groups[indexPath.Row];
			GroupDetailViewController uiview = Storyboard.InstantiateViewController("GroupDetailViewController") as GroupDetailViewController;
			uiview.Group = pg;
			NavigationController.PushViewController(uiview, true);
		}

		partial void addGroup(UIBarButtonItem sender)
		{
			UIViewController uiview = Storyboard.InstantiateViewController("GroupDetailViewController");
			NavigationController.PushViewController(uiview, true);
		}

		public override void CommitEditingStyle(UITableView tableView, UITableViewCellEditingStyle editingStyle, Foundation.NSIndexPath indexPath)
		{
			switch (editingStyle)
			{
				case UITableViewCellEditingStyle.Delete:

					this.ShowHUD("Deleting Group");
					Task.Run(async () =>
					{
						PersonGroupModel pg = Groups[indexPath.Row];
						await PersonGroupClient.Shared.DeletePersonGroup(pg.Id);
						BeginInvokeOnMainThread(() =>
						{
							// remove the item from the underlying data source
							Groups.RemoveAt(indexPath.Row);
							// delete the row from the table
							tableView.DeleteRows(new NSIndexPath[] { indexPath }, UITableViewRowAnimation.Fade);
							this.ShowSimpleHUD("Group deleted");
						});
					});

					break;
				case UITableViewCellEditingStyle.None:
					Console.WriteLine("CommitEditingStyle:None called");
					break;
			}
		}
		public override bool CanEditRow(UITableView tableView, NSIndexPath indexPath)
		{
			return true; // return false if you wish to disable editing for a specific indexPath or for all rows
		}

		public override string TitleForDeleteConfirmation(UITableView tableView, NSIndexPath indexPath)
		{
			return "Delete";
		}

	}
}
