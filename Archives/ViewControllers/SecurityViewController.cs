// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using UIKit;
using Akavache;
using Archives.Helpers;
using System.Reactive;
using CoreFoundation;
using System.Threading.Tasks;
using System.Linq;

namespace Archives.ViewControllers
{
	public partial class SecurityViewController : UIViewController, IUITextFieldDelegate
	{
		private bool _isPasscodeEnabled = false;
		private bool _isTouchIDEnabled = false;

		public SecurityViewController(IntPtr handle) : base(handle) { }

		public override void ViewDidLoad()
		{
			base.ViewDidLoad ();

			NavigationItem.Title = "Security";

			Task.Run (async () =>
			{
				_isPasscodeEnabled = await AkavacheHelper.TryGetObject<bool> ("IsPasscodeEnabled");
				_isTouchIDEnabled = await AkavacheHelper.TryGetObject<bool> ("IsTouchIDEnabled");

				BeginInvokeOnMainThread (() => {

					IsTouchIDEnabled.Enabled = _isPasscodeEnabled;

					IsPasscodeEnabled.SetState(_isPasscodeEnabled, true);
					IsTouchIDEnabled.SetState(_isTouchIDEnabled, true);

					ConfigureDigits();
				});
			});
		}


		partial void savedButtonClicked (NSObject sender)
		{
			IObservable<Unit> result_passcode = BlobCache.UserAccount.InsertObject ("IsPasscodeEnabled", _isPasscodeEnabled);
			IObservable<Unit> result_touchid = BlobCache.UserAccount.InsertObject ("IsTouchIDEnabled", _isTouchIDEnabled);

			string codeData = FirstDigit.Text + SecondDigit.Text + ThirdDigit.Text + FourthDigit.Text;
			IObservable<Unit> result_codedata = BlobCache.Secure.InsertObject ("Passcode", codeData);

			NavigationController.PopViewController (true);
		}


		partial void IsPasscodeEnabledValueChanged(NSObject sender)
		{
			_isPasscodeEnabled = ((UISwitch)sender).On;

            ConfigureDigits();

			if (_isPasscodeEnabled)
			{
				//FirstDigit.BecomeFirstResponder(); // this is already done by ConfigureDigits();
				IsTouchIDEnabled.Enabled = true;
			}
			else
			{
				_isTouchIDEnabled = false;
				IsTouchIDEnabled.Enabled = false;
				IsTouchIDEnabled.SetState(_isTouchIDEnabled, true);
			}
		}


		partial void IsTouchIDEnabledValueChanged(NSObject sender)
		{
			_isTouchIDEnabled = ((UISwitch)sender).On;
		}


		partial void textFieldEditingChanged (UITextField sender)
		{
			var next = digitTextFields.FirstOrDefault (tf => tf.Tag == sender.Tag + 1);

			if (next !=null)
			{
				next.BecomeFirstResponder ();
			}
			else
			{
				sender.ResignFirstResponder ();
			}
		}


		[Export ("textField:shouldChangeCharactersInRange:replacementString:")]
		public bool ShouldChangeCharacters(UITextField textField, NSRange range, string replacementString)
		{
			var newLength = textField.Text.Length + replacementString.Length - range.Length;

			return newLength <= 1;
		}


		void ConfigureDigits()
		{
			foreach (var digitTextField in digitTextFields)
			{
				digitTextField.Enabled = _isPasscodeEnabled;
			}

			if (_isPasscodeEnabled)
			{
				digitTextFields [0].BecomeFirstResponder ();
			}
		}
	}
}
