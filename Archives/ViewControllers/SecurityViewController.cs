// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using UIKit;
using Akavache;
using Archives.Helpers;
using System.Reactive;
using CoreFoundation;
using System.Threading.Tasks;

namespace Archives.ViewControllers
{
	public partial class SecurityViewController : UIViewController
	{
		private bool _isPasscodeEnabled = false;
		private bool _isTouchIDEnabled = false;

		public SecurityViewController(IntPtr handle) : base(handle)
		{
			NavigationItem.Title = "Security";
		}

		public override void ViewDidLoad()
		{
			NavigationItem.SetRightBarButtonItem(new UIBarButtonItem(UIBarButtonSystemItem.Save, (sender, e) =>
			{
				
				IObservable<Unit> result_passcode = BlobCache.UserAccount.InsertObject("IsPasscodeEnabled", _isPasscodeEnabled);
				IObservable<Unit> result_touchid = BlobCache.UserAccount.InsertObject("IsTouchIDEnabled", _isTouchIDEnabled);

				string codeData = FirstDigit.Text + SecondDigit.Text + ThirdDigit.Text + FourthDigit.Text;
				IObservable<Unit> result_codedata = BlobCache.Secure.InsertObject("Passcode", codeData);

				NavigationController.PopViewController(true);

			}), true);

			Task.Factory.StartNew(async () =>
			{
				await AkavacheHelper.TryGetObject<bool>("IsPasscodeEnabled").ContinueWith((a) => {
					 _isPasscodeEnabled = a.Result;
				});

				await AkavacheHelper.TryGetObject<bool>("IsTouchIDEnabled").ContinueWith((b) => {
					_isTouchIDEnabled = b.Result;
				});

				DispatchQueue.MainQueue.DispatchAsync(() =>
				{ 
					if (_isPasscodeEnabled == false)
					{
						IsTouchIDEnabled.Enabled = false;
					}

					IsPasscodeEnabled.SetState(_isPasscodeEnabled, true);
					IsTouchIDEnabled.SetState(_isTouchIDEnabled, true);

					ConfigureDigits();
				});
			});
		}

		partial void IsPasscodeEnabledValueChanged(NSObject sender)
		{
			_isPasscodeEnabled = ((UISwitch)sender).On;
            ConfigureDigits();

			if (_isPasscodeEnabled)
			{
				FirstDigit.BecomeFirstResponder();
				IsTouchIDEnabled.Enabled = true;
			}
			else
			{
				_isTouchIDEnabled = false;
				IsTouchIDEnabled.Enabled = false;
				IsTouchIDEnabled.SetState(_isTouchIDEnabled, true);
			}
				
		}

		partial void IsTouchIDEnabledValueChanged(NSObject sender)
		{
			_isTouchIDEnabled = ((UISwitch)sender).On;
		}

		void ConfigureDigits()
		{
			FirstDigit.BecomeFirstResponder();

			FirstDigit.EditingChanged += (sender, e) =>
			{
				SecondDigit.BecomeFirstResponder();
			};

			FirstDigit.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newLength = textField.Text.Length + replacementString.Length - range.Length;
				return newLength <= 1;
			};

			SecondDigit.EditingChanged += (sender, e) =>
			{
				ThirdDigit.BecomeFirstResponder();
			};

			SecondDigit.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newLength = textField.Text.Length + replacementString.Length - range.Length;
				return newLength <= 1;
			};

			ThirdDigit.EditingChanged += (sender, e) =>
			{
				FourthDigit.BecomeFirstResponder();
			};

			ThirdDigit.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newLength = textField.Text.Length + replacementString.Length - range.Length;
				return newLength <= 1;
			};

			FourthDigit.EditingChanged += (sender, e) =>
			{
				FirstDigitRepeat.BecomeFirstResponder();
			};

			FourthDigit.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newLength = textField.Text.Length + replacementString.Length - range.Length;
				return newLength <= 1;
			};

			FirstDigitRepeat.EditingChanged += (sender, e) =>
			{
				SecondDigitRepeat.BecomeFirstResponder();
			};

			FirstDigitRepeat.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newLength = textField.Text.Length + replacementString.Length - range.Length;
				return newLength <= 1;
			};

			SecondDigitRepeat.EditingChanged += (sender, e) =>
			{
				ThirdDigitRepeat.BecomeFirstResponder();
			};

			SecondDigitRepeat.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newLength = textField.Text.Length + replacementString.Length - range.Length;
				return newLength <= 1;
			};

			ThirdDigitRepeat.EditingChanged += (sender, e) =>
			{
				FourthDigitRepeat.BecomeFirstResponder();
			};

			ThirdDigitRepeat.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newLength = textField.Text.Length + replacementString.Length - range.Length;
				return newLength <= 1;
			};

			FourthDigitRepeat.ShouldChangeCharacters = (textField, range, replacementString) =>
			{
				var newLength = textField.Text.Length + replacementString.Length - range.Length;
				return newLength <= 1;
			};

			FirstDigit.Enabled = (_isPasscodeEnabled) ? true : false;
			FirstDigitRepeat.Enabled = (_isPasscodeEnabled) ? true : false;

			SecondDigit.Enabled = (_isPasscodeEnabled) ? true : false;
			SecondDigitRepeat.Enabled = (_isPasscodeEnabled) ? true : false;

			ThirdDigit.Enabled = (_isPasscodeEnabled) ? true : false;
			ThirdDigitRepeat.Enabled = (_isPasscodeEnabled) ? true : false;

			FourthDigit.Enabled = (_isPasscodeEnabled) ? true : false;
			FourthDigitRepeat.Enabled = (_isPasscodeEnabled) ? true : false;
		}
	}
}
