// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using Foundation;
using UIKit;
using Xamarin.Cognitive.Face.iOS;
namespace Archives.ViewControllers
{
	public partial class SetFaceRecViewController : UIViewController
	{
        private UIImagePickerController imagePicker = new UIImagePickerController();

        public SetFaceRecViewController (IntPtr handle) : base (handle) { }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            imagePicker.SourceType = UIImagePickerControllerSourceType.Camera;
            imagePicker.FinishedPickingMedia += ImagePickerFinishedPickingMedia;
            imagePicker.Canceled += ImagePickerCanceled;

            var faceServiceClient = new Xamarin.Cognitive.Face.iOS.MPOFaceServiceClient("dd1bb5963dcd4d269e9cb296dde2dac5");
        }

        private async void ReleasePicker()
        {
            imagePicker.FinishedPickingMedia -= ImagePickerFinishedPickingMedia;
            imagePicker.Canceled -= ImagePickerCanceled;

            await imagePicker.DismissViewControllerAsync(true);
        }

        private void ImagePickerFinishedPickingMedia(object sender, UIImagePickerMediaPickedEventArgs e)
        {
            var type = e.Info[UIImagePickerController.MediaType].ToString();

            if (type == "public.image")
            {
                var referenceURL = e.Info[new NSString("UIImagePickerControllerReferenceURL")] as NSUrl;

                if (referenceURL != null)
                    Console.WriteLine(string.Format("URL: {0}", referenceURL));

                var picture = new UIImage();
                picture = e.Info[UIImagePickerController.OriginalImage] as UIImage;

                if (picture != null)
                {
                    SaveImage(picture);
                    picturePreview.Image = picture;
                }
            }

			ReleasePicker();
        }

        private void SaveImage(UIImage picture)
        {
            var directory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            string filename = System.IO.Path.Combine(directory, "picture.jpg");

            UIImage scaled = ScaledImage(picture, 750, 1334);
            NSData imgData = scaled.AsJPEG();
            NSError error = null;

            if (imgData.Save(filename, false, out error))
            {
                Console.WriteLine(string.Format("saved as {0}", imgData));
            }
            else
            {
                Console.WriteLine(string.Format("not saved as {0} because {1}", filename, error.LocalizedDescription));
            }
        }

        private void ImagePickerCanceled(object sender, EventArgs e)
        {
            ReleasePicker();
        }

		private UIImage ScaledImage(UIImage image, nfloat maxWidth, nfloat maxHeight)
		{
			var maxResizeFactor = Math.Min(maxWidth / image.Size.Width, maxHeight / image.Size.Height);
			var width = maxResizeFactor * image.Size.Width;
			var height = maxResizeFactor * image.Size.Height;
			return image.Scale(new CoreGraphics.CGSize(width, height));
		}

        partial void takePhoto(UIButton sender)
        {
            PresentViewController(imagePicker, false, null);
        }
	}
}
